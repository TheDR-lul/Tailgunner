/// Device Manager
/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–±—Ä–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ Buttplug.io –∏ Lovense API

use anyhow::{Result, Context};
use buttplug::client::ButtplugClient;
use serde::{Deserialize, Serialize};
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeviceInfo {
    pub id: u32,
    pub name: String,
    pub device_type: DeviceType,
    pub connected: bool,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum DeviceType {
    Buttplug,
    Lovense,
}

pub struct DeviceManager {
    buttplug_client: Arc<RwLock<Option<ButtplugClient>>>,
    devices: Arc<RwLock<Vec<DeviceInfo>>>,
    lovense_enabled: bool,
}

impl DeviceManager {
    pub fn new() -> Self {
        Self {
            buttplug_client: Arc::new(RwLock::new(None)),
            devices: Arc::new(RwLock::new(Vec::new())),
            lovense_enabled: false,
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Buttplug –∫–ª–∏–µ–Ω—Ç–∞
    pub async fn init_buttplug(&self) -> Result<()> {
        use buttplug::core::connector::ButtplugWebsocketClientTransport;
        use buttplug::core::connector::ButtplugRemoteClientConnector;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
        if self.buttplug_client.read().await.is_some() {
            log::info!("Buttplug client already initialized");
            return Ok(());
        }
        
        let client = ButtplugClient::new("Butt Thunder");
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Intiface Central —á–µ—Ä–µ–∑ WebSocket
        let ws_url = "ws://127.0.0.1:12345";
        log::info!("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Intiface Central: {}", ws_url);
        
        let transport = ButtplugWebsocketClientTransport::new_insecure_connector(ws_url);
        let connector = ButtplugRemoteClientConnector::<ButtplugWebsocketClientTransport>::new(transport);
        
        match client.connect(connector).await {
            Ok(_) => {
                log::info!("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Intiface Central");
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                match client.start_scanning().await {
                    Ok(_) => log::info!("üîç –ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤..."),
                    Err(e) => log::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {}", e),
                }
                
                *self.buttplug_client.write().await = Some(client);
                Ok(())
            }
            Err(e) => {
                log::error!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Intiface Central: {}", e);
                log::info!("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:");
                log::info!("   1. Intiface Central –∑–∞–ø—É—â–µ–Ω");
                log::info!("   2. WebSocket —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ ws://127.0.0.1:12345");
                log::info!("   3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Intiface –≤–∫–ª—é—á–µ–Ω 'Start Server Automatically'");
                Err(anyhow::anyhow!("Buttplug connection failed: {}", e))
            }
        }
    }

    /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    pub async fn scan_devices(&self) -> Result<()> {
        if let Some(client) = self.buttplug_client.read().await.as_ref() {
            client.start_scanning().await
                .context("Failed to start device scanning")?;
            
            log::info!("Scanning for devices...");
            Ok(())
        } else {
            Err(anyhow::anyhow!("Buttplug client not initialized"))
        }
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    pub async fn stop_scanning(&self) -> Result<()> {
        if let Some(client) = self.buttplug_client.read().await.as_ref() {
            client.stop_scanning().await
                .context("Failed to stop scanning")?;
            Ok(())
        } else {
            Err(anyhow::anyhow!("Buttplug client not initialized"))
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    pub async fn get_devices(&self) -> Vec<DeviceInfo> {
        let mut devices = Vec::new();
        
        if let Some(client) = self.buttplug_client.read().await.as_ref() {
            let client_devices = client.devices();
            log::info!("üì± –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {}", client_devices.len());
            
            for device in client_devices {
                log::info!("  ‚Üí {} (index: {}, type: {})", 
                    device.name(), 
                    device.index(),
                    if device.vibrate_attributes().is_empty() { "no vibrate" } else { "vibrate OK" }
                );
                
                devices.push(DeviceInfo {
                    id: device.index(),
                    name: device.name().to_string(),
                    device_type: DeviceType::Buttplug,
                    connected: true,
                });
            }
        }

        *self.devices.write().await = devices.clone();
        devices
    }

    /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    pub async fn send_vibration(&self, intensity: f32) -> Result<()> {
        let intensity = intensity.clamp(0.0, 1.0);

        let guard = self.buttplug_client.read().await;
        if let Some(client) = guard.as_ref() {
            let devices = client.devices();
            
            if devices.is_empty() {
                log::warn!("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
                return Ok(());
            }
            
            log::info!("üéÆ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏ {} –Ω–∞ {} —É—Å—Ç—Ä–æ–π—Å—Ç–≤", intensity, devices.len());
            
            for device in devices {
                log::info!("  ‚Üí {} (index: {})", device.name(), device.index());
                
                match device.vibrate(&buttplug::client::ScalarValueCommand::ScalarValue(intensity.into())).await {
                    Ok(_) => log::info!("    ‚úÖ –£—Å–ø–µ—à–Ω–æ"),
                    Err(e) => log::error!("    ‚ùå –û—à–∏–±–∫–∞: {}", e),
                }
            }
        } else {
            log::error!("‚ùå Buttplug –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return Err(anyhow::anyhow!("Buttplug client not initialized"));
        }

        Ok(())
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–∏–±—Ä–∞—Ü–∏–π (Fail-Safe)
    pub async fn stop_all(&self) -> Result<()> {
        self.send_vibration(0.0).await
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    pub async fn is_connected(&self) -> bool {
        self.buttplug_client.read().await.is_some()
    }
}

impl Default for DeviceManager {
    fn default() -> Self {
        Self::new()
    }
}

impl Drop for DeviceManager {
    fn drop(&mut self) {
        // Fail-safe: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        let client_lock = Arc::clone(&self.buttplug_client);
        tokio::spawn(async move {
            if let Some(client) = client_lock.write().await.take() {
                for device in client.devices() {
                    let _ = device.vibrate(&buttplug::client::ScalarValueCommand::ScalarValue(0.0.into())).await;
                }
                let _ = client.disconnect().await;
            }
        });
    }
}

